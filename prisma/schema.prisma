generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Uses connection pooling
  url = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Movie {
  id             String   @id @default(uuid())
  title          String
  description    String
  year           Int
  duration       Int
  genres         String[]
  directors      String[]
  rating         Float
  votes          Int
  imageUrl       String   @map("image_url")
  trailerUrl     String   @map("trailer_url")
  showtimes      Showtime[]
  reviews        Review[]
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
}

model Showtime {
  id               String   @id @default(uuid())
  movie            Movie    @relation(fields: [movieId], references: [id])
  movieId          String   @map("movie_id")
  date             DateTime
  time             String
  availableSeats   Json     @map("available_seats")
  booking          Booking?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String
  imageUrl    String   @map("image_url")
  reviews     Review[]
  bookings    Booking[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model Review {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @map("user_id")
  movie         Movie    @relation(fields: [movieId], references: [id])
  movieId       String   @map("movie_id")
  rating        Int
  comment       String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@index([userId], name: "idx_review_user_id")
  @@index([movieId], name: "idx_review_movie_id")
}

model Booking {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @map("user_id")
  showtime      Showtime @relation(fields: [showtimeId], references: [id])
  showtimeId    String   @unique @map("showtime_id")
  seats         String[]
  price         Int
  isPayed       Boolean
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@index([userId], name: "idx_booking_user_id")
}